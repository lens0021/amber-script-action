import { array_contains } from "std/array"
import { has_failed } from "std/env"
import { dir_create, file_chmod, file_exists, file_extract } from "std/fs"
import { file_download } from "std/http"
import { env_var_get } from "std/env"

// copy. original: https://github.com/amber-lang/amber/blob/0.4.0-alpha/setup/shared.ab
fun get_os(): Text {
  // Determine OS type
  let os_type = $ uname -s $ failed {
    echo "Failed to determine OS type (using `uname` command)."
    echo "Please try again or make sure you have it installed."
    exit 1
  }
  if os_type == "Darwin":
    return "apple-darwin"

  if os_type != "Linux" {
    echo "Unsupported OS type: {os_type}"
    echo "Please try again or use another download method."
    exit 1
  }

  if not has_failed("ls -l /lib | grep libc.musl"):
    return "unknown-linux-musl"

  return "unknown-linux-gnu"
}

fun get_arch(): Text {
  // Determine architecture
  let arch_type = $ uname -m $ failed {
    echo "Failed to determine architecture."
    echo "Please try again or use another download method."
    exit 1
  }

  let arch = array_contains(["arm64", "aarch64"], arch_type)
    then "aarch64"
    else "x86_64"

  return arch
}
// end copy

const cache_path = trust env_var_get("AMBER_CACHE_PATH")
const bin_path = "{cache_path}/bin"
const dest_path = "{cache_path}/dest"
const tmp_path = "{cache_path}/tmp"
const arch = get_arch()
const os = get_os()

if {
  file_exists("{dest_path}/script.sh") {
    echo "::notice::A compiled bash script found. Skipping install Amber."
  } file_exists("{bin_path}/amber") {
    echo "::notice::Amber binary found. Skipping install Amber."
  } else {
    let url = "https://github.com/amber-lang/amber/releases/download/0.4.0-alpha/amber-{arch}-{os}.tar.xz"
    dir_create(tmp_path)
    file_download(url, "{tmp_path}/amber.tar.xz")
    trust file_extract("{tmp_path}/amber.tar.xz", "{tmp_path}")
    dir_create(bin_path)
    trust mv "{tmp_path}/amber-{arch}-{os}/amber" "{bin_path}/amber"
    file_chmod("{bin_path}/amber", "+x")
  }
}
