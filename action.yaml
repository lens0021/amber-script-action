name: Amber Script
description: Run arbitrary Amber scripts.
branding:
  color: orange
  icon: code
inputs:
  script:
    description: The script to run
    required: true
  amber-version:
    default: 0.4.0-alpha
  enable-cache:
    description: Whether to cache Amber binaries and the compiled bash scripts
    default: true
  cache-path:
    description: The path to store Amber binaries and the compiled bash scripts
    default: /home/runner/.amber-script-action
  internal-eof-word:
    description: Internal only. Do not use this.
    default: END_OF_GIVEN_AMBER_SCRIPT
runs:
  # We make this as a composite action to reduce the maintaining cost.
  # There is a limitation of composite action itself:
  #   - name of steps are not displayed. (https://github.com/orgs/community/discussions/10985)
  using: composite
  steps:
    - id: hash-script
      shell: bash
      run: |
        # Make cache key for given script
        {
          echo -n 'hash='
          cat <<${{ inputs.internal-eof-word }} | sha256sum | cut -d' ' -f 1
        ${{ inputs.script }}
        ${{ inputs.internal-eof-word }}
        } >> "$GITHUB_OUTPUT"
    - name: Cache compiled script
      uses: actions/cache@v3
      if: inputs.enable-cache
      with:
        path: ${{ inputs.cache-path }}/dest
        key: amber-script-action-${{ runner.os }}-script-${{ inputs.amber-version }}
    - name: Cache Amber binaries
      uses: actions/cache@v3
      if: inputs.enable-cache
      with:
        path: ${{ inputs.cache-path }}/bin
        key: amber-script-action-${{ runner.os }}-bin-${{ inputs.amber-version }}

    - uses: lens0021/amber-script-action@3c7caebc8e12acfa4e6eede82b524470e1a5dfea
      with:
        script: |
          import { array_contains } from "std/array"
          import { has_failed } from "std/env"
          import { dir_create, file_chmod, file_exists, file_extract } from "std/fs"
          import { file_download } from "std/http"

          // copy. original: https://github.com/amber-lang/amber/blob/0.4.0-alpha/setup/shared.ab
          fun get_os(): Text {
            // Determine OS type
            let os_type = $ uname -s $ failed {
                echo "Failed to determine OS type (using `uname` command)."
                echo "Please try again or make sure you have it installed."
                exit 1
            }
            if os_type == "Darwin":
                return "apple-darwin"

            if os_type != "Linux" {
                echo "Unsupported OS type: {os_type}"
                echo "Please try again or use another download method."
                exit 1
            }

            if not has_failed("ls -l /lib | grep libc.musl"):
                return "unknown-linux-musl"

            return "unknown-linux-gnu"
          }

          fun get_arch(): Text {
            // Determine architecture
            let arch_type = $ uname -m $ failed {
                echo "Failed to determine architecture."
                echo "Please try again or use another download method."
                exit 1
            }

            let arch = array_contains(["arm64", "aarch64"], arch_type)
                then "aarch64"
                else "x86_64"

            return arch
          }
          // end copy

          const cache_path = "/home/runner/.amber-script-action"
          const bin_path = "{cache_path}/bin"
          const dest_path = "{cache_path}/dest"
          const tmp_path = "{cache_path}/tmp"
          const arch = get_arch()
          const os = get_os()

          if {
            file_exists("{dest_path}/script.sh") {
              echo "::debug::A compiled bash script found. Skipping install Amber."
            } file_exists("{bin_path}/amber") {
              echo "::debug::Amber binary found. Skipping install Amber."
            } else {
              dir_create(bin_path)
              let url = "https://github.com/amber-lang/amber/releases/download/0.4.0-alpha/amber-{arch}-{os}.tar.xz"
              file_download(url, "{tmp_path}/amber.tar.xz")
              trust file_extract("{tmp_path}/amber.tar.xz", "{tmp_path}")
              trust mv "{tmp_path}/amber-{arch}-{os}/amber" "{bin_path}/amber"
              file_chmod("{bin_path}/amber", "+x")
            }
          }

    # TODO: Convert this to amber-script-action.
    # This includes a here-document expression, so hard to convert.
    - shell: bash
      run: |
        # Build the given script
        if [ -e "${{ inputs.cache-path }}/dest/${{ steps.hash-script.outputs.hash }}.sh" ]; then
          echo "::debug::A compiled bash script found. Skip building."
        else
          if [ ! -e "${{ inputs.cache-path }}/bin/amber-${{ inputs.amber-version }}" ]; then
            echo "::error::No both compfiled bash script and Amber binary found after trying to install."
            exit 1
          else
            mkdir -p "${{ inputs.cache-path }}/tmp"
            cat <<${{ inputs.internal-eof-word }} > "${{ inputs.cache-path }}/tmp/${{ steps.hash-script.outputs.hash }}.ab"
        ${{ inputs.script }}
        ${{ inputs.internal-eof-word }}
            mkdir -p "${{ inputs.cache-path }}/dest"
            ${{ inputs.cache-path }}/bin/amber-${{ inputs.amber-version }} build "${{ inputs.cache-path }}/tmp/${{ steps.hash-script.outputs.hash }}.ab" "${{ inputs.cache-path }}/dest/${{ steps.hash-script.outputs.hash }}.sh"
          fi
        fi

    - shell: bash
      run: |
        # Run the compiled script
        bash "${{ inputs.cache-path }}/dest/${{ steps.hash-script.outputs.hash }}.sh"
